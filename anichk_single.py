# -*- coding: utf-8 -*-
"""
Created on Tue Feb 21 14:14:18 2017

@author: medialab
"""

import h5py,pdb
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy.special import expit
import tensorflow as tf

#KandM.h5 is generated by concatenate.py
NK = h5py.File('./data/limb_KandM_ex4.h5','r')['N_Kinect'][:]
K  = h5py.File('./data/limb_KandM_ex4.h5','r')['Kinect'][:]
M  = h5py.File('./data/limb_KandM_ex4.h5','r')['Mcam'][:]   
[MIN,MAX]  = h5py.File('./data/model0210.h5','r')['minmax'][:]   

def Anichk(idx =1,start = 200, taro = False ): 
    
   
    
    if taro:
        # KM_taro_ex4.h5 is generated by concatenate.py
        K_taro = h5py.File('./data/KM_taro_ex4.h5','r')['Ktaro'][:]
        M_taro = h5py.File('./data/KM_taro_ex4.h5','r')['Mtaro'][:]

    spts = 3 #sample points per frame (joints number *3)
    batch_size = 8
    loop = 20    
    tmp = np.zeros([18,batch_size*loop])
    
    for i in range(2,3):
        
        J  = h5py.File('./data/FC/single_'+str(i)+'.h5','r')
        W1  = J['W1'][:]
        W2  = J['W2'][:]
        be1 = J['b1'][:]
        be2 = J['b2'][:]
        bd1 = J['bp1'][:]
        bd2 = J['bp2'][:]
         
        W_prime1 = tf.transpose(W2)
        W_prime2 = tf.transpose(W1)
        
    
        x = tf.placeholder(tf.float32, shape = [None, spts])
        
        
        h_e_1 = tf.nn.relu(tf.matmul(x,W1)+be1)
        h_e_2 = tf.nn.relu(tf.matmul(h_e_1,W2)+be2)
        h_d_1 = tf.nn.relu(tf.matmul(h_e_2,W_prime1)+bd1)
        h_d_2 = tf.sigmoid(tf.matmul(h_d_1,W_prime2)+bd2)        
        
        sess = tf.InteractiveSession()
        
        for j in range(loop):
            batch_raw = np.zeros([batch_size,spts])
            batch_raw[:] = NK[i*3:(i+1)*3,start+j*batch_size:start+(j+1)*batch_size].T
    
            a = sess.run(h_d_2,feed_dict={x:batch_raw}).T
            tmp[i*3:(i+1)*3,j*batch_size:(j+1)*batch_size] = a
                
    KJ_mod = tmp*(MAX-MIN)+MIN


    
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.set_xlabel('Z axis')
    ax.set_ylabel('X axis')
    ax.set_zlabel('Y axis')    
    
    for i in range(batch_size*loop):
        plt.cla()
        kxm = KJ_mod.T[i,::3]
        kym = KJ_mod.T[i,1::3]
        kzm = KJ_mod.T[i,2::3]

    
        mx = M.T[start+i,::3]
        my = M.T[start+i,1::3]
        mz = M.T[start+i,2::3]    
    #
        kx = K.T[start+i,::3]
        ky = K.T[start+i,1::3]
        kz = K.T[start+i,2::3]  

        if taro:
            kx_taro = K_taro.T[start+i,::3]
            ky_taro = K_taro.T[start+i,1::3]
            kz_taro = K_taro.T[start+i,2::3]
    
            mx_taro = M_taro.T[start+i,::3]
            my_taro = M_taro.T[start+i,1::3]
            mz_taro = M_taro.T[start+i,2::3]
                
            ax.scatter(kz_taro, kx_taro, ky_taro, c = 'blue', s = 100)    
            ax.scatter(mz_taro, mx_taro, my_taro,c = 'green',s = 50,alpha=.4)
            ax.scatter(kz_taro, kx_taro, ky_taro,c = 'red',s = 50,alpha=.4)
            
        
        ax.scatter(kz, kx, ky, c = 'blue', s = 100,label='Kinect Joints')    
        ax.scatter(mz, mx, my,c = 'green',s = 50,alpha=.4,label='MoCam Joints')
        ax.scatter(kzm, kxm, kym,c = 'red',s = 50,alpha=.4,label='K modified')
        ax.set_xlim(-300,300)
        ax.set_ylim(-200,400)
        ax.set_zlim(50,600)
        ax.set_title('frame no : '+str(i+start)+'  training '+ str(idx*1000) +' times ' )
        ax.set_xlabel('Z axis')
        ax.set_ylabel('X axis')
        ax.set_zlabel('Y axis')
        plt.legend( loc=1)
        plt.draw()
        plt.pause(1.0/60)
    
        
                
                
                
                
                
                